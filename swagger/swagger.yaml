swagger: "2.0"
info:
  title: Tamland Video Conversion APIs
  description: Tamland Video Conversion System API Documentation
  version: '0.1.0'
host: vod.taamland.ir
basePath: /api
schemes:
  - https
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    name: Authorization
    in: header
    description: JWT token to authorize requests. Format should be '{token}'
security:
  - ApiKeyAuth: []
tags:
  - name: "Conversion Operations"
    description: "Operations related to video upload and conversion"
  - name: "Get Metadata"
    description: "Operations for getting videos metadata"
paths:
  /startVideoConversion:
    post:
      tags:
        - "Conversion Operations"
      summary: Start Video Conversion
      description: For videos that are already present on the server, send video name (defaults to mp4 with no extension) to start the process
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              VideoName:
                type: string
                example: "Studio4_20250705_185325.mp4"
            required:
              - VideoName
      responses:
        200:
          description: Video conversion started, returns corresponding videoID and conversionID
          schema:
            type: object
            properties:
              ConversionID:
                type: integer
                format: int64
                example: 24
              VideoID:
                type: integer
                format: int64
                example: 15
        401:
          description: Token not valid
        500:
          description: Server error
        406:
          description: Request not applicable
        404:
          description: Video not found
  /uploadVideo:
    post:
      tags:
        - "Conversion Operations"
      summary: Upload Video File Chunks
      description: Uploads a video file chunk by chunk using Dropzone.js.
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: The video file chunk being uploaded.
          required: true
          type: file
        - name: dzuuid
          in: formData
          description: Unique identifier for the file.
          required: true
          type: string
        - name: dzchunkindex
          in: formData
          description: The index of the chunk being uploaded.
          required: true
          type: integer
          format: int32
        - name: dzchunkbyteoffset
          in: formData
          description: The byte offset for the current chunk.
          required: true
          type: integer
          format: int64
        - name: dztotalchunkcount
          in: formData
          description: The total number of chunks the file is divided into.
          required: true
          type: integer
          format: int32
        - name: dztotalfilesize
          in: formData
          description: The total size of the file being uploaded.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Chunk upload successful.
        500:
          description: Error saving file or size mismatch.
  /getVideos:
    get:
      tags:
        - "Get Metadata"
      summary: Get Videos List
      responses:
        200:
          description: Successful response containing a list of video objects
          schema:
            type: array
            items:
              type: object
              properties:
                VideoName:
                  type: string
                VideoID:
                  type: integer
                  format: int64
                thumbnail:
                  type: string
                isFinished:
                  type: boolean
                conversionID:
                  type: integer
                  format: int64
                duration:
                  type: string
                  description: Video duration in HH:MM:SS format
                480_finish:
                  type: string
                  format: date-time
                720_finish:
                  type: string
                  format: date-time
                1080_finish:
                  type: string
                  format: date-time
            example:
              - VideoName: "Studio4_20250705_185325"
                VideoID: 15
                thumbnail: https://vod.taamland.ir/done/Studio4_20250705_185325/480_Studio4_20250705_185325.png
                isFinished: true
                conversionID: 24
                duration: "01:30:45"
                480_finish: "2025-04-05 00:50:43.000"
                720_finish: "2025-04-05 00:55:22.000"
                1080_finish: "2025-04-05 01:05:12.000"
              - VideoName: "Studio3_20260613_174319"
                VideoID: 26
                thumbnail: https://vod.taamland.ir/done/Studio3_20260613_174319/480_Studio3_20260613_174319.png
        500:
          description: Server error
  /getVideoProgress:
    get:
      tags:
        - "Conversion Operations"
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              ConversionID:
                type: integer
                format: int64
                example: 24
              Quality:
                type: integer
                format: int64
                example: 720
            required:
              - ConversionID
              - Quality
      summary: Get conversion progress
      description: Get a video conversion progress in percentile per conversionID and quality
      responses:
        200:
          description: returns conversion progress in percentages
          schema:
            type: integer
            example: 59.24
        500:
          description: Server error
  /socket.io:
    get:
      tags:
        - "Conversion Operations"
      summary: WebSocket Connection for Video Progress
      description: |
        Connect to WebSocket endpoint to receive real-time progress updates.
        Use Socket.IO client to connect and subscribe to progress events.
        
        Example usage:
        ```javascript
        const socket = io('https://vod.taamland.ir', {
          query: { token: 'your-jwt-token' }
        });
        
        socket.emit('subscribe_progress', {
          conversionID: 24,
          quality: 720
        });
        
        socket.on('progress_update', (data) => {
          console.log('Progress:', data.progress);
        });
        ```
      parameters:
        - name: token
          in: query
          required: true
          type: string
          description: JWT token for authentication
      responses:
        101:
          description: WebSocket connection established